{"version":3,"sources":["api/people.js","components/user-directory/UserList.js","components/user-directory/UserProfile.js","components/user-directory/UserDirectory.js","App.js","serviceWorker.js","index.js"],"names":["allUsers","sort","a","b","nameA","first_name","toUpperCase","nameB","forEach","user","i","full_name","last_name","initials","charAt","logins","map","login","Date","date","useStyles","makeStyles","theme","list","overflowY","paddingTop","width","backgroundColor","outline","UserList","mobile","users","usersLoaded","selectedUser","setSelectedUser","handleSearch","classes","List","className","style","height","maxWidth","ListItem","key","alignItems","ListItemText","primary","primaryTypographyProps","variant","divider","TextField","placeholder","size","onKeyUp","InputProps","startAdornment","InputAdornment","position","fullWidth","id","button","dense","selected","onClick","ListItemAvatar","Avatar","secondary","email","length","card","marginLeft","loginActivity","maxHeight","overflow","UserProfile","Card","CardHeader","titleTypographyProps","title","subheader","avatar","action","IconButton","href","CardContent","Typography","Divider","city","state","getTime","display","format","formatDistanceToNow","addSuffix","UserDirectory","useState","setUsersLoaded","setUsers","Map","previousSearchResults","setPreviousSearchResults","useMediaQuery","useEffect","Grid","container","spacing","item","xs","align","LinearProgress","md","e","k","v","keyword","searchQuery","target","value","trim","get","filteredUsers","filter","toLowerCase","includes","set","createMuiTheme","props","MuiButtonBase","disableRipple","App","ThemeProvider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d85896f0.chunk.js","sourcesContent":["import peopleJSON from './people.json';\r\n\r\n// sort users alphabetically by first name\r\nlet allUsers = peopleJSON.sort((a, b) => {\r\n    const nameA = a.first_name.toUpperCase();\r\n    const nameB = b.first_name.toUpperCase();\r\n    if (nameA < nameB) {\r\n        return -1;\r\n    }\r\n    if (nameA > nameB) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n});\r\n\r\n// create keys for a user's full name and initials\r\n// convert user logins array into date objects and sort in descending order\r\nallUsers.forEach((user, i) => {\r\n    user.full_name = `${user.first_name} ${user.last_name}`;\r\n    user.initials = `${user.first_name.charAt(0)}${user.last_name.charAt(0)}`;\r\n    user.logins = user.logins.map(login => new Date(login.date)).sort((a, b) => b - a);\r\n});\r\n\r\n\r\nfunction filterUsersByName(keyword) {\r\n    return allUsers.filter(user => user.full_name.toLowerCase().includes(keyword.toLowerCase()));\r\n}\r\n\r\nexport { allUsers, filterUsersByName };\r\n","import { Avatar, InputAdornment, List, ListItem, ListItemAvatar, ListItemText, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nconst useStyles = makeStyles(theme => ({\r\n    list: {\r\n        overflowY: 'auto',\r\n        paddingTop: '0px',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,.1)',\r\n            outline: '1px solid #eee'\r\n        }\r\n    }\r\n}));\r\n\r\nfunction UserList({ mobile, users, usersLoaded, selectedUser, setSelectedUser, handleSearch }) {\r\n\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <List\r\n                className={classes.list}\r\n                style={{\r\n                    height: mobile ? '300px' : '600px',\r\n                    maxWidth: mobile ? '1000px' : '400px',\r\n                }}>\r\n\r\n                {!usersLoaded && <ListItem key={-2} alignItems=\"flex-start\">\r\n                    <ListItemText primary={'Loading, Please Wait ...'} primaryTypographyProps={{ variant: 'h6' }} />\r\n                </ListItem>}\r\n\r\n                {usersLoaded && <>\r\n                    <ListItem divider>\r\n                        <TextField\r\n                            placeholder=\"Search\"\r\n                            variant=\"outlined\"\r\n                            size=\"small\"\r\n                            onKeyUp={handleSearch}\r\n                            InputProps={{\r\n                                startAdornment: <InputAdornment position=\"end\" ><SearchIcon /></InputAdornment>,\r\n                            }}\r\n                            fullWidth />\r\n                    </ListItem>\r\n                    {users.map(user => {\r\n                        return <ListItem\r\n                            key={user.id}\r\n                            alignItems=\"flex-start\"\r\n                            button\r\n                            dense\r\n                            selected={user.id === selectedUser.id}\r\n                            onClick={() => { setSelectedUser(user) }}>\r\n                            <ListItemAvatar>\r\n                                <Avatar>{user.initials}</Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={user.full_name}\r\n                                secondary={!mobile && user.email}\r\n                            />\r\n                        </ListItem>\r\n                    })}\r\n                </>\r\n                }\r\n\r\n                {(usersLoaded && !users.length) && <ListItem key={-1} alignItems=\"flex-start\">\r\n                    <ListItemText primary={`No Results.`} primaryTypographyProps={{ variant: 'h6' }} />\r\n                </ListItem>}\r\n\r\n            </List>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nUserList.propTypes = {\r\n    users: PropTypes.array,\r\n    usersLoaded: PropTypes.bool,\r\n    selectedUser: PropTypes.object,\r\n    setSelectedUser: PropTypes.func,\r\n    handleSearch: PropTypes.func\r\n};\r\n\r\nexport default UserList;","import { Avatar, Card, CardContent, CardHeader, Divider, IconButton, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport { format, formatDistanceToNow } from 'date-fns';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        marginLeft: '5px',\r\n        height: '600px'\r\n    },\r\n    loginActivity: {\r\n        maxHeight: '200px',\r\n        overflow: 'auto',\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '&::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: 'rgba(0,0,0,.1)',\r\n            outline: '1px solid #eee'\r\n        }\r\n    }\r\n}));\r\n\r\nfunction UserProfile({ user }) {\r\n    const classes = useStyles();\r\n    if (!user) { return ''; }\r\n    else {\r\n        return <>\r\n            <Card className={classes.card} variant=\"outlined\">\r\n                <CardHeader\r\n                    titleTypographyProps={{ variant: 'h6' }}\r\n                    title={user.full_name}\r\n                    subheader={user.email}\r\n                    avatar={<Avatar>{user.initials}</Avatar>}\r\n                    action={\r\n                        <IconButton href={`mailto:${user.email}`}><EmailIcon /></IconButton>\r\n                    }\r\n                >\r\n                </CardHeader>\r\n                <CardContent>\r\n                    <Typography variant=\"body2\">\r\n                        <b>First Name:</b> {user.first_name ? user.first_name : 'N/A'}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"body2\">\r\n                        <b>Last Name:</b> {user.last_name ? user.last_name : 'N/A'}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"body2\">\r\n                        <b>Email Address:</b> {user.email ? <a href={`mailto:${user.email}`}>{user.email}</a> : 'N/A'}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"body2\">\r\n                        <b>City:</b> {user.city ? user.city : 'N/A'}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider />\r\n\r\n                <CardContent>\r\n                    <Typography variant=\"body2\">\r\n                        <b>State:</b> {user.state ? user.state : 'N/A'}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider />\r\n\r\n                <CardContent className={classes.loginActivity}>\r\n                    <Typography variant=\"body2\"><b>Recent Logins:</b></Typography>\r\n                    {user.logins.map(login => {\r\n                        return <Typography key={`${login.getTime()}`} variant=\"caption\" display=\"block\">\r\n                            {`${format(login, 'PPpp')} (${formatDistanceToNow(login, { addSuffix: 'true' })})`}\r\n                        </Typography>\r\n                    })}\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    }\r\n}\r\n\r\nUserProfile.propTypes = {\r\n    user: PropTypes.object\r\n};\r\n\r\n\r\nexport default UserProfile;","import { Grid, LinearProgress, Typography } from '@material-ui/core';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { allUsers, filterUsersByName } from '../../api/people';\r\nimport UserList from './UserList';\r\nimport UserProfile from './UserProfile';\r\n\r\nfunction UserDirectory() {\r\n    const [usersLoaded, setUsersLoaded] = useState(false);\r\n    const [users, setUsers] = useState([]);\r\n    const [selectedUser, setSelectedUser] = useState();\r\n    const [previousSearchResults, setPreviousSearchResults] = useState(new Map());\r\n    const mobile = useMediaQuery('(max-width:950px)');\r\n    useEffect(() => {\r\n        setUsers(allUsers);\r\n        setUsersLoaded(true);\r\n        setSelectedUser(allUsers[0])\r\n    }, []);\r\n\r\n    function updatePreviousSearchResults(k, v) {\r\n        setPreviousSearchResults(new Map(previousSearchResults.set(k, v)));\r\n    }\r\n\r\n    function handleSearch(e) {\r\n        const searchQuery = e.target.value.trim();\r\n        if (previousSearchResults.get(searchQuery)) {\r\n            setUsers(previousSearchResults.get(searchQuery));\r\n        }\r\n        else\r\n            if (searchQuery.length > 2) {\r\n                const filteredUsers = filterUsersByName(searchQuery);\r\n                setUsers(filteredUsers);\r\n                updatePreviousSearchResults(searchQuery, filteredUsers);\r\n            }\r\n            else {\r\n                setUsers(allUsers);\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Grid container spacing={mobile ? 2 : 0}>\r\n                {/* \r\n                // Link to login activity compponent\r\n                <Grid item xs={12} style={{height:'1px'}} align=\"right\" >\r\n                    <Tooltip title=\"Login Activity Dashboard\" placement=\"left\">\r\n                        <Link to='/login-activity'><IconButton size=\"small\">\r\n                            <InsertChartIcon></InsertChartIcon>\r\n                        </IconButton>\r\n                        </Link>\r\n                    </Tooltip>\r\n                </Grid> */}\r\n                <Grid item xs={12} align=\"left\">\r\n                    <Typography variant=\"h5\">User Directory</Typography>\r\n                    {!usersLoaded && <LinearProgress />}\r\n                </Grid>\r\n                <Grid item md={3} xs={12}>\r\n                    <UserList\r\n                        users={users}\r\n                        usersLoaded={usersLoaded}\r\n                        handleSearch={handleSearch}\r\n                        setSelectedUser={setSelectedUser}\r\n                        selectedUser={selectedUser}\r\n                        mobile={mobile}\r\n                    />\r\n                </Grid>\r\n                <Grid item md={9} xs={12}>\r\n                    <UserProfile user={selectedUser} />\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserDirectory;","\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport UserDirectory from './components/user-directory/UserDirectory';\r\n\r\nconst theme = createMuiTheme({\r\n  props: {\r\n    MuiButtonBase: {\r\n      disableRipple: true,\r\n    },\r\n  },\r\n});\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Router>\r\n        <div className=\"App\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <UserDirectory />\r\n            </Route>\r\n            {/* <Route path=\"/login-activity\">\r\n              <LoginActivityDashboard />\r\n            </Route> */}\r\n            <Route>\r\n              <UserDirectory />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </ThemeProvider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}